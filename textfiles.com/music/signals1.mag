

                                 - SiGnAlS -

                           Issue I         Volume I

                                July 17, 1993

         "Dedicated to all the coderz and their insane delusions..."

                 Executive Editor: Necr답, The PsYcHiC MoNkS



                               I: Introduction
                               ---------------

Welcome to the first issue of our underground newsletter, SiGnAlS. Our aim is
to encourage the musical development of the MOD format, and to help all the
coders who may need a little introduction to the latest scene. To subscribe to
our newsletter, simply e-mail segaag@craft.camp.clarkson.edu. Please note that 
some subsequent issues will be by subscription ONLY. Well, on to the fun 
stuff.

                                 II: Basix
                                ------------

First off, for those of you that don't know, the MOD format is a format
designed to standardize the creation of music that uses digital instrument
files. This format usually supports four to thirty-two tracks of samples,
with each sample having 64K max of data. It is very similar to the MIDI or 
CMF format for music, but enjoys a much clearer and more realistic sound, due 
to the inclusion of digital waveforms.

Why use MODs? For those of you who program the other formats, MOD programming 
may seem like a waste of time. This is untrue. The module format is far 
superior to either MIDI or CMF for the following reasons:

    1) All instruments are sampled, thus resulting in a much more realistic
       sound.

    2) All of the traditional MIDI and CMF effects are available, plus
       some extra which MIDI and CMF do not support.

    3) Unlike MIDI, you do not need an external keyboard or rack synth to
       produce high-quality sound.

It does have a few drawbacks, however, but these are small:

    1) MOD format (usually) only supports 4 tracks, as opposed to 8-12 on
    MIDI or CMF.

    2) Samples can only be played over a three octave range.

    3) Designing your own instruments is harder that modifying, for example,
       a CMF instrument file.

    4) Playback takes a large amount of processor time.

Using a few tricks, though, can get you past most of the above drawbacks. If
you haven't noticed, all of the new assembly demos (esp. those out of Europe)
use the MOD format. Using a MOD in your demo or game can significantly 
enhance the sound quality of your product. It is also possible to overlay 
digital sound effect tracks over the music itself, thus resulting in a very 
professional sound.

Enough of the sales pitch. (I'm not making any money here.)

More basics about mods in the next issue.

                       III: Tricks and Tips w/ Necr답

T&T is for the intermediate to advanced .MOD programmer, and contains all of
the tricks I've found during my coding days. (Well, maybe not ALL of them. I 
have to keep something up my sleeve for the demos, you know....)

First off, a few notes about the peculiarity of the MOD format. MOD tracks 
contain 64 beats, with each beat containing a note, efx data, or nothing.  
This is somewhat biased to programming a 4/4 mod, since 4 beats per measure 
fills out the 64 beats nicely. However, it is possible to code a mod in a 
different time signature, like 6/8 or even 5/4! To do this, you need to use 
the --D00 (end pattern) effect.  To show an example, let us pretend we're 
trying to write a mod in 6/8. We've entered the pattern data, and it ends 
right before beat 48.  What we have to do is force the mod to go to the next 
track here, or else there will be an extra blank beat after each measure.  
Simply enter a --D00 effect on the last beat of your pattern, and the mod 
will skip to the next track. (Warning: make sure you put the effect on the 
beat with the last of your pattern data, not the blank beat after.) This will 
create a pattern of 48 beats (beats 0-47), which works out to either 6/8 or 
3/4.

Another peculiarity of MODs: Different trackers interpret some effects 
differently. One of the most notorious wrong implementations is the pitch
slide. On early versions of TrakBlaster and other mod players, the pitch 
slides are off by as much as a factor of 2.4!!! To remedy this, try to use
effect --3XX (pitch slide to note) instead of --1XX or -2XX (pitch slide 
up/down). To use --3XX, simply specify the effect on the second note of your 
glissando. For example, if we wanted to slide from C2 to G2 by 3 step
increments, we would enter this:


                        01  C-2  01000        (using sample 1)
                        02  ---  00000
                        03  ---  00000
                        04  ---  00000
                        05  G-2  01303
                        06  ---  00303
                        07  ---  00303
                        08  ---  00303
                             .
                             .
                             . etc.

This will play a C2 on beat 1, and start the slide to the G on beat 5. The
slide continues on beats 6, 7, and 8 until the slide is finished. Be careful
to include a large enough step value to make sure the slide finishes. Usually
the best value is determined by experimentation. If the slide keeps coming up
short, raise the step value or make the slide longer.

One more short trick:

If you have a sound which is louder than most of the other sounds in your MOD
(a thunderous gunshot, maybe...), you don't have to keep sticking CXX (volume
set) on each beat where you play the sound. Just use the sample volume
setting in your tracker (most good ones have this). Once it's set to a good
level, keep it there. As long as you don't put any volume info in the beat,
the sample will play at the volume you set instead of the default 64 volume.
You can still manually set the volume with the CXX switch if you want. ;)

                                                    - Necr답

                           IV: Visualizations
                           ------------------
Before you can write a really good mod, it is necessary to be able to write 
really good music first. I have heard enough C-F-G mods, lame dance rips, 
strung-together-sample MODS, and Nintendo-sounding mods to make me puke five 
or six times over. Please try something different every once in a while. 
Don't stick to the lame voicings perpetrated by every bad demo group out
there. Next time you want to write a C chord with a C bass, try a Csus2 with 
an E bass. Try weird sample efx. Add voice sample at inopportune spots. In 
short, don't be afraid to experiment. Sorry I sound a bit hostile today ;) 
, but as a person who downloads way too much, I am sick and tired of spending 
hours downloading mods, only to find that I have downloaded a 40 second 
sample of a Ministry song. To all of you who do write extremely good stuff, 
my respect: Future Crew, Cascada, Skull (not!), the guys at DENS, and all you 
others. If you want to hear any of my stuff, my archives (PsychicModsX.lzh)
are available on wuarchive.wustl.edu in /pub/msdos_uploads/mods. Out for now.


                             V: Conclusions
                            ----------------
Well guys, that's our first issue. I know it's not much, but there will be
a new one every couple of days, depending on submissions. If you have any
contributions (a neat new effect, where to find good samples, etc..), please
send them to our address:

        e-mail: segaag@craft.camp.clarkson.edu

        turtle-express:        Necr답
                             re: Signals
                          The PsYcHiC MoNkS
                         7958 State Route 69
                        Oriskany, NY    13424


peace and let the cyberspace fly
