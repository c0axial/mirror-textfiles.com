                        _________________________________
                       |                                 |
                       |  ^%[> Phantom Access 5.7K <]%^  |
                       |                                 |
                       |   (C)reated By:  Lord Digital   |
                       |_________________________________|

                                =:=:=:=:=:=:=:=:=
                                [ Introduction: ]
                                =:=:=:=:=:=:=:=:=


                               *+*             *+*

The entire Phantom Access series  was written as a set of programmable modules,
that are easily intergratable with each other, and can accomplish various tasks
without the need of supervision. 

For example:

1: Hack #: NPA-ANC-XXXX until you have 4 valid codes.
2: Using the 4 valid codes from step 1: Scan the exchange of: NPA-ANC-XXXX
   In this exchange note all systems that  connect at 1200bps and identify
   themselves with /login/ usually indicating a  Unix. If task is complete
   & it is no later then xx;xx;xx;xx go on to step 4.
3: End, write all information to a file, and shut down.
4: Login to TRW using password x & dialup y, if password x no longer works
   then use password  x1, x2, etc, until you hit one that  is still valid.
   once connected  pull reports on the people in file z. or if no password
   still valid; look at time, if it is  no later then xx;xx;xx;xx go  onto
   step 6.
5: End, write all information to a file, and shut down.
6: ..........etc

In short; a series of  programs with the same  style of syntax, that write  and
retrieve information from a set of files whose format is compatible with all of
the other programs that work with them. => a primitive Database with 'infinite'
capabilities. Using simple commands you could create a custom system  for what-
ever task(s) you wanted.

     Phantom Access 5.7X (X = The hardware specific version you are using.)  is
the code hacker of the series. It is fully 'programmable' in the sense that you
can customize existing (example) modules to hack  whatever you want them to. Or
just as easily create new modules for complex system's. 

For example:

1: Call MCI
2: Enter valid code for MCI
3: Call PBX NPA-ANC-XXXX
4: Hack code for PBX

Or:

1: Call MCI
2: Enter valid code for MCI
3: Call Number NPA-ANC-XXXX
4: Trunk it
5: K(p<MF).etc.S(t<TT)
6: etc...

     Obviously the longer the set of 'blocks' the more time it  will take to go
through one 'block-set' and repeat the sequence with the code being incremented
or whatever it is that you're doing.

     One thing to be VERY carefull about is the quality of  AUDIO on the  chain
of events. If you're dialing through 6  extenders to a hack a code for a PBX in
heathentown Australia, not only will it take a hell of a long time  to complete
one block-set, but by the time you connect with heathentown's PBX, the Audio is
very probably so bad that the Apple-Cat isn't going to detect an error message,
or a dialtone for that matter...


--->>> Any question's, comment's, or suggestion's, are  welcome. If you do  not
       have any other way of contacting me at the present time. I can be reach-
       on the: Cat's Cavern, @ 805/492-3150. You are able to login  without the
       use of a secondary pw. 


                       =^=^=^=^=^=^=^=^=^=^=^=^=^=^=^=^=^=
                       [ Hacker Overview / Documentation ]
                       =^=^=^=^=^=^=^=^=^=^=^=^=^=^=^=^=^=

(Introduction)
--------------

Upon running, you will see something to the effect of:

[Slot][X][Drive][X][Volume][XXX]

X(XX) = whatever s,d,v you want all further disk access directed toward. Simply
        hitting C/R at every input selects the default setting of S6,D1,V000...

        (PLEASE NOTE: You will have to patch DOS to make it aware of any  hard-
         ware device you want to access. <If this is not automatic.> Ie: Slot=7
         Volume 58, etc. If you booted  into Slot 6, into  normal DOS, then  as
         DOS is concerned your Hard Disk doesn't exist and it will just hang. )

After a preliminary memory search (to see what is or isn't allready there),  it
will come up at the central  menu. Selecting a '1' from  here will jump to  the
begging of the 'start-hacker' routine, a '2' run's the utility package, & a '3'
quits to basic.

Assuming you chose 1 you will now  be prompted for a 'sub-module' to load. This
is the text file that contains the instructions  of what phantom access will do
during this hack. Hitting C/R get's you a catlog of the current s,d,v.

After typing in the sub-module name, assuming the module  is found on the s,d,v
selected, you will be asked whether you want  this to be a random or sequential
scan at the C[ode] variable. 

Start Scan at code: (obvious). If the length  of the code you  select is longer
or shorter then  the Code Length specified for  this sub-module, it will  again
prompt you for the code to start at...

Re-Test valid codes: If you select yes it will test each codes that comes up as
good 1 more time to make sure that it really is valid.

Date: Enter the appropriate date, in the  format shown, this is for the  status
report at the end of a scan.

Some question to the effect of: 'use occ dialthrough', answering  No, will jump
to the 'is everything correct' input, immediately  prior to starting the  scan.
If you answer Yes, you will be prompted with the following:
___

Explanation: If you wish to 'dial-through' or chain codes/systems, you can very
easily include this in the 'blockset'. OCC dialthrough is different, it assumes
                     1
it will be using  MCI to  dialthrough, so step 1 will be  replaced by this.  In
other words, there is only 1 actual pick-up, every other time it cycles through
to the pick-up/hang-up routine, it will 'pound out' instead. This was  made for
purpose of speeding  up 'chaining', having only 1  outgoing call in the  entire
scan, instead of 3,000+ (or however long you let it run). The 'install max fail
limit' question,  asks: do you want to  install a limit on the number of  times
that 'pound out' can fail. (After it 'pounds out' <#> the hacker searches for a
dialtone, indicating that it can go on & redial, if none is found, then it will
cycle through to a physical hang-up, followed by a redialing to the OCC, and re
start from where it left off.) Answering yes, allows  you to impose a  limit on
the number of times this audio test can fail, and  provided that it fails  more
times then you chose to allow, the hacker will shut itself down.

---

OCC dialup: (dialup to Occ node)
Valid code for OCC: (valid code)
Install maximum fail limit? (answering yes  will go to the  next question, a no
                             will jump to 'is everything correct.)
Maximimum # of times Audio test can fail: (maximum # of times the OCC can  fail
                                           to 'pound out'.)
___

Is everything correct? (yes- starts hacker, no- goes back to 'rnd / seq' input)


     Hacker Status: Everything is  more or less self-explanatory. Esc quits and
                    asks you if you desire a status report on the scan that was
                    just done. And brings you back to main menu.


---

[Footnote#1]: MCI = ANY system that will return the initial Tone back with a #,
              key. As far as I know AllNet, and several  other OCC's do this as
              well.


Lord Digital

