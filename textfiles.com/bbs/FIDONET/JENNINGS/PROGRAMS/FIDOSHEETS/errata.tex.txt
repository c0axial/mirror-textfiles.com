\input defs
\input fontsize
\input errata.sty
\input output

\raggedright
\hfuzz=2pt
%\advance\baselineskip-.50pt
%\advance\parskip-.50pt

\def\tty{\vskip\parskip\tt\obeylines\parskip=0pt}

\footline={\hfil\hl\folio\hfil}

\centerline{\hl Changes \& Enhancements not in the Book}
\vskip\parskip
\centerline{\fido\ version 12s}
\centerline{1 May, 1990}
\vskip\parskip
\centerline{Fido Software, Box 77731, San Francisco CA 94107}
\line{\hfill voice: 415-764-1688\hfill data: 415-764-1629\hfill}

\skip
\bar
\begindoublecolumns

\subheading{New Commands}

The Fido commands defined in COMMANDS.INI have been rearrangedç
and enhanced. A new one is included on the diskette. If you hadç
set custom privilege levels and locks (P= and L=) you will needç
to make these changes yourself to the new file.

If you forget to replace COMMANDS.INI, SET-FIDO will remind you.

\subheading{Replying and Quoting}

A new major feature has been added to Fido; ``message quoting''ç
when entering or replying to messages. The feature consists of aç
new Message Section command, a new command in the message editor,ç
and enhancements to two existing message editor commands.

It works like this: while you are reading messages, you may findç
one that you want to reply to that has a number of points withinç
it you want to address in your reply. Instead of taking notes,ç
with the new W)rite-Buffer command (below) simply take a snapshotç
of the message. At any time before you disconnect, you can enterç
a new message, and read that snapshot into your message, whereç
you can delete any parts that you don't want, which has been madeç
a lot easier with the message editor enhancements.

Be warned: it is very easy to overuse message quoting, andç
generate huge and hard to read messages. A little goes a longç
way.

The edit buffer is a disk file named MSG.BUF; if the command lineç
switch /I is used, the filename is modified in the same way asç
the log files.

\subheading{New Message Section Command}

A new command has been added to the Message Section: 
W)rite-Buffer. It saves a copy of the message you just read intoç
the newly-coined ``edit buffer''. There is only one buffer, soç
only the most recent use of the W)rite-Buffer command isç
remembered. The contents of the Edit Buffer is cleared when a newç
caller connects; it is not preserved from one caller to the next. 

The end result of this is that when replying to a message, youç
can include the original author's message as reference. Theç
R)ead-Buffer command lets you ``quote'' each line with a ``{\ttç
>}'' character to make quoted lines stand out.

For callers privilege 4 and above, the W)rite-Buffer commandç
asks:

\example{File to write to [CR=Buffer]:}

Allowing you to save messages in a file you specify instead ofç
the default buffer file. In this case, subsequent writes areç
appended to the file, letting you collect messages about aç
certain subject into a file.

\subheading{Message Editor Enhancements}

New command added: R)ead-Buffer. This reads the contents of theç
Edit Buffer into your message, as if you had typed it manually.ç
It asks two questions:

\example{Prefix each line with ``>''? (y,N):}
\example{Force word-wrap on paragraphs? (y,N):}

The first option lets you make the words of another person youç
are quoting stand out. The second is unfortunate, and is meant toç
help you compensate for messages generated by programs that doç
not properly support standard ``word wrap'' file format. Firstç
try it without it; if paragraphs look terrible (ie. a series ofç
long lines followed by a short line, over and over) then deleteç
the lines and try again with ``force word-wrap'' YES.

Because R)ead-Buffer reads in the entire edit buffer, you willç
need to delete the lines you don't want; see the D)elete-Lineç
enhancement, below.

If you are privilege 4 or higher, R)ead-Buffer asks you anç
additional question:

\example{File to read from [CR=Buffer]:}

It will accept any valid pathname. The file better be a textç
file. Many uses come to mind -- canned answers for commonç
questions, etc.


\subheading{Additional Editor Changes}

Besides the R)ead-Buffer command addition, two very old commandsç
in the message editor have been radically improved. 

D)elete-Line, which lets you delete a line from your message, nowç
accepts a ``range'' of line numbers, with which you can deleteç
many lines at once. Previously, if you wanted to delete (forç
example) lines 5 through 16, you had to enter ``D 5'' 12 times;ç
now you can do it with a single ``D 5-16'' command. 

I)nsert-Line was limited to inserting a single line in yourç
existing text, too limited to be of much use. I)nsert-Line is nowç
a true text-insert command; starting at the line number youç
specify, text is entered until you enter a blank line, as inç
normal text entry. Lines below your insertion point are ``movedç
down'' to make room for the inserted text.

\subheading{C)hange Sub-commands}


Within the C)hange command submenu 

Changes: Screen W)idth and L)ength have been renamed C)olumns andç
L)ines; the little-used T)abs command removed in favor of alwaysç
expanding tabs; M)ore command removed in favor of setting L)inesç
to 0. The interim G)raphics was removed.

Additions: I)nterface command. It is the so-far promisedç
language/graphics interface. Please refer to the ``Language''ç
section of this errata sheet for details. Please note that theç
default privilege for this command is very high; if you useç
additional languages or graphic interfaces you will want to lowerç
it.


\subheading{New Main Section Command}
T)riggers are manual controls over event execution. You canç
assign triggers to events defined in EVENTS.INI; you can put theç
same trigger on any number of events. Events without triggers areç
always on, just as they are in previous versions.

There are 8 triggers, which can have one of three possibleç
settings: OFF, which means what it says; the trigger and anyç
events that use it are disabled. ON allows that event to run whenç
it's time comes. ONCE does also what it sounds like; after theç
event runs successfully, the trigger is turned OFF. This allowsç
you to setup an event to run one time only, without having toç
remember to turn the event OFF after running it.

Triggers are placed on events when you define them in EVENTS.INI:

\example{All 9:00 360 FidoNet M\ \ \ \ \ \ T=4}

This event has trigger \#4; that trigger must be ON or ONCE forç
that event to run when the time becomes 9:00AM. An example wouldç
be a special FidoNet event that sends mail to any system in theç
nodelist directly, for high priority mail, which you would enableç
with a trigger set to ONCE.

The T)riggers command lists events for you to help you see whatç
you are doing.

\section{Multi-Line Fido Installations}

There is now a way to run different modems on each of theç
different systems; See the new FIDO.INI option, {\tt system-path}. 
Thanks go to Ken Ganshirt for this one.

It was never mentioned before, but \fido\ does file locking onç
CALLER.SYS, the caller file -- and does up to ten retries to openç
it successfully. So you never have to worry about losing callerç
data.

For two-line Fidos, under DoubleDOS, DESQview, etc, you can nowç
run both ``sides'' completely from within one ``FIDO''ç
subdirectory. Events and areas can be assigned to only oneç
``task'', by a new option in AREAS.INI and EVENTS.INI, to allowç
controlling which side executes what event, and additionally haveç
message and file areas unique to a task.

Each systems task ID is the nnnn/I command line option; referringç
to the manual, the /I number is the ``task ID'' that makes eachç
side unique, and makes Fido create unique logfiles, and handleç
message areas slightly differently.

For example, you have a two line Fido running, with sidesç
numbered 1 and 2 (1/I and 2/I). The two systems are identical toç
the user, and you want to have only one side run FidoNet mail.ç
The following example would do just that:

\skip
{\tty
quick\ rush all\ \ 2:00\ 60\ \ \ FidoNet\ A\ \ \ \ ID=1
\ \ \ \ \ \ \ \ all\ \ 0:00\ 1440 \ Page
}

The first event is assigned to side 1 only; under noç
circumstances will side 2 ever execute that event. The secondç
event, a Page event, is shared; it has no ID number and thereforeç
is common to both. 

You should limit FidoNet events to only one side, when sharing aç
netmail area; all other event types can be shared without aç
problem.

Message and file areas can be assigned to each side in anç
identical manner. The other side will not be able to access theç
other sides areas. Areas without an ID= statement are shared byç
both sides.

{\skip\tty
msgarea= msg\quad D=``Messages''\quad O=FidoNet ID=1
filearea= inbound U=outbound\quad D=``Files'' O=FidoNet ID=2
}

\subheading{Options in AREAS.INI} 

Please note that in early versions (and in the Book) Fido let youç
specify options by the first character only; ``O=F'' wasç
equivelant to ``O=FidoNet'', and so on. I hope you weren't tooç
cheap with your typing -- as Fido now requires at least the firstç
two characters now. This wasn't an arbitrary decision just toç
torment you -- the addition of the ``O=Private'' -- as opposed toç
the existing ``O=Public'' -- made this necessary. Sorry! SET-FIDOç
will inform you of your previous stinginess if necessary.

\example{O=ReadOnly}

Messages cannot be entered in this area, except by privilegeç
level 7 (system operator).

\example{O=Private}

All messages entered in this area will be marked {\tt(PRIVATE)}.ç
This helps those who run BBSs that may have marginal messageç
contents; snoopy types simply cannot see anything, so you don'tç
have to worry about getting caught.

\example{O=Shared}

Indicates to Fido that this message area is shared with anotherç
Fido or other program that can generate .MSG files in thisç
directory -- this is meant to be used on multi-line Fidoç
installations, to prevent message file contention. (It isç
actually file-locking, done at the right level for a change.) Itç
causes Fido to recount messages whenever it needs to generate aç
new message file.

\example{O=Anon}

When a new message is created, it is marked {\tt From: Anon}.

\example{O=Public}

Makes Fido not ask {\tt Private? (y,N)}; all messages are public.


\section{New keywords in FIDO.INI}

\example{timelog <YES, no>}

This controls whether or not Fido creates TIMELOG.BBS and theç
.TLG timelog files. 

\example{netlog <YES, no>}

Controls whether or not FidoNet creates NETLOG.BBS and the .NLGç
FidoNet call files.

\example{cont-interval <1-60>}

This controls how often CONT FIDONET events are run; in versionç
12Q it was fixed at one minute. Also allowed within FidoNet routeç
language files. 

\example{system-path <pathname>}

Use this to define the pathname that \fido\ uses to locate theç
following files: CALLER.SYS, *.LOG, *.NDL, ROUTE.*, NODES.BBS.ç
Normally Fido looks for these files in the default directory.

When running more than one \fido\ with a multitasker utility, youç
can now install each \fido\ in it's own subdirectory, but shareç
critical files like the caller file, etc.

\example{rings <1 - 255>}

\fido\ normally answers the phone (well, modem\dots) on the firstç
ring; this lets you change it to something else. 


{\tty
directory
key
aka
system
sysop
point
log
flag
}

These are DCM (Dutchie's Conference Mailer) keywords; \fido\ç
ignores them. DCM ignores \fido's keywords -- so you can useç
FIDO.INI to specify both \fido\ and DCM's installation, savingç
all that clutter and extra editing.

{\tty
dot <1 - 32767>
alt-dot <1 - 32767>
}

These two define your Point address. The default is zero (noç
point address). Please see the section on POINTS below forç
details.

{\tty
text-path <pathname>
\vskip10pt
help-path <pathname>\quad REMOVED
bbs-path <pathname>\quad REMOVED
}

The interim {\tt help-path} and {\tt bbs-path} options have beenç
removed. They have been replaced by the single {\tt text-path}.ç
This is where Fido will look for get all .HLP files and text .BBSç
files; quotes, WELCOMEs, BULLETIN.1 - BULLETIN.99, etc. 

If multiple languages are implemented, then {\tt text-path} isç
where Fido will look for text files not uniquely specified forç
each particular language.

\example{node-path <pathname>}

Where Fido and FidoNet and the MAKELIST program will look for allç
of the NODELIST.* files.

SET-FIDO will {\it not} create these two subdirectories for you;ç
you must create them manually and copy the files into them. 


\example{multi-lingual <yes, NO>}

Please refer to the ``Language'' section of this errata sheet. 

This controls how Fido treats the language interface; if YES,ç
then Fido asks new users to choose a language as part of the 
new-caller signon process, and requires that there be aç
COMMANDS.INI file in each language subdirectory. If NO, then theç
language interface is simply an option within the C)hangeç
subcommand.

\skip
{\tty
zm-rx-type <number>\hfill ;DEFAULT: 0
zm-tx-type <number>\hfill ;DEFAULT: 0
zm-tx-start <number>\hfill ;DEFAULT: 1024
}
Please refer to the ``ZMODEM'' section in this errata sheet.

\skip
{\tty
keep-packets <yes,NO>
keep-nodemaps <YES,no>
wazoo <YES,no>
multi-tsync <YES,no>
fsc001 <yes,NO>
fsc011 <yes,NO>
system-name ``Your System Name''
session-password <password>
}

Please refer to the ``FIDONET'' section in this errata sheet. Theç
default settings, if any, are shown above in CAPS -- unless youç
have a PARTICULAR REASON do not change the settings of theseç
commands. They are for testing and protocol verification only. 

\example{multi-tasker <number>\hfill ;DEFAULT: 0}

An option to inform Fido of any ``multitasker'' program you mightç
be using. Fido will run fine with any multitasker, even one notç
listed here; this is an option to potentially improveç
performance. You should see a slight performance increase.ç
Replace {\tt <number>} with one of the following: 0:Plain MSDOS;ç
1:DoubleDOS; 2:DESQview. Others may be defined later. (Pleaseç
refer to the manual about the ``nnnn/I'' command line switch whenç
running more than one Fido.)

\skip
{\tty
external-login-A <number 3 - 255>
external-login-B <number 3 - 255>
external-login-C <number 3 - 255>
... ...
external-login-J <number 3 - 255>
}

This is part of a special option to allow Fido to run other loginç
programs such as the uucp-to-FidoNet gateways software such asç
``UFGATE''. (The unix uucp-to-FidoNet gateway software -- ask Timç
Pozar at 1:125/555 for details.)

It enables a program or a person to login normally, but runç
another program instead of Fido. There can be up to 10ç
``external-logins'' at one time. When properly installed, aç
caller that successfully passes the name and password section ofç
the Fido login exits \fido\ and runs a separate program, such asç
UFGATE. (It is up to the system operator to install the necessaryç
programs and batch files to cause this to happen.)

You install this by first creating a batch file that runs yourç
specified program via the DOS ERRORLEVEL convention. Then inç
FIDO.INI, you specify the {\tt external-login-A} ERRORLEVEL toç
match (``A'' can be any letter through ``J''). This tells Fidoç
that when a caller logs in with External-Login A, to exit to DOSç
with this ERRORLEVEL.

Next, for each program or person you wish to invoke the specialç
login procedure, you assign a special attribute to an otherwiseç
normal caller in the Fido caller file, ``CALLER.SYS''. This isç
done by setting the ADDRESS FIELD in the caller record to theç
{\it exact} string below:

\example{external-login A}

Letters ``A'' through ``J'' identify which of the {\tt External-login} 
definitions are used. The name and password fields are setç
normally. The address field is all the separates special loginsç
from normal callers.

\example{dial-prefix ``string''}

The string is prepended to the phone number from the nodelistç
files before dialing. A space is added between the prefix and theç
phone number. Suggestions: put ``P'' for pulse or private PBXç
access in there, instead of in NODELIST.BBS with XlatList andç
save a bunch of disk space and hassle.

\skip
\settabs\+XXXXXXXXXX&XXXXXXX&\cr
\+NUMBER&PREFIX&RESULT\cr
\+297-9145&(none)&ATDT2979145\cr
\+297-9145&P..&ATDTP..2979145\cr
\+642-1034&\$DIAL&\$DIAL 6421034\cr
\+\$dial\underbar{ }642-1034&(none)&\$DIAL 6421034\cr
\+\$dial\underbar{ }642-1034&P..&P.. \$DIAL 6421034\cr

Fido can execute script files instead of just dialing phoneç
numbers. The script language is exactly the same as in FidoTerm,ç
a shareware telecomm program available from the Fido Softwareç
BBS, except that the screen and console oriented commands have noç
effect or display on the screen.

A bucks character ``\$'' in a phone number invokes the scriptç
processor. The text following the ``\$'' is the script filenameç
and arguments, and anything before the ``\$'' is ignored. (Thatç
lets you mass-process phone numbers, using XlatList or 
``dial-prefix'' in FIDO.INI without interfering.)

Arguments to script files must has spaces separating them; theç
usual ``\underbar{ }'' as defined for the nodelist file format isç
fine. 

\example{show-seen-by <yes,no>\hfill ;DEF.: YES}

This affects only users of echo-mail programs CONFMAIL and theç
like; if set to ``NO'', Fido suppresses the verbose ``SEEN-BY''ç
list of nodes.

\example{quick-login <yes,no>\hfill ;DEFAULT: NO}

If ``YES'', the Q)uick-Login command at the local console logs inç
the first caller in the caller list (presumably the systemç
operator). Very handy for local maintenance. Leave disabled ifç
many people have physical access to the system.

\skip
{\tty
\settabs\+modem-type 99 &\cr
\+modem-type 0&;no modem\cr
\+modem-type 2&;Direct connection\cr
\+modem-type 8&;POPCOM 2400\cr
\+modem-type 13&;Multitech 224e\cr
\+modem-type 12&;see below\cr
\+modem-type 21&;Hayes V-series no ASB\cr
\+modem-type 22&;ditto, locked 9600\cr
\+modem-type 23&;ditto, locked 19,200\cr
\+modem-type 24&;USR HST, locked 38,400\cr
\+modem-type 25&;USR Courier 2400,\cr
\+modem-type 27&;USR Dual Std, locked 9600\cr
\+modem-type 28&;USR Dual Std, locked 19,200\cr
\+&Hardware Handshake\cr
}

{\tt modem-type 0} prevents \fido\ from using the modem at all.ç
In other words, Fido is usable only from the local console. 

{\tt modem-type 2} is for direct-connect installations. When theç
CD line goes true, Fido assumes the online and connected state,ç
at the baud rate set by {\tt maxbaud <number>} in FIDO.INI. DTRç
is used to disconnect. You must use the new script facility toç
accomplish dialing. No modem initialization is done.

{\tt modem-type 8} is for the Prentice POPCOM 2400 baud modem.

{\tt modem-type 12} had a bug in version 12K; it issued USRç
Courier-specific commands, and many ``generic'' 2400 baud modemsç
failed. This has been repaired; see modem type {\tt 25}.

{\tt modem-type (14, 16, 17)} have additional initializationç
commands: {\tt AT\&H1\&R2}.

\section{Zmodem file transfer protocol}

This is a fully compatible, standard Zmodem implementation, withç
a few fancy features added. You can adjust Zmodems behavior withç
the two controls in FIDO.INI (details follow), because Zmodem canç
potentially accept data faster than your computer can handle. Theç
default settings are quite conservative, and should work on allç
machines. 

The block size used depends on the baud rate the connection isç
at, according to this table (see also {\tt zm-tx-start}).

\skip
\halign{
#\hfil&		%block size
\hfil#\cr	% baud rate

Block Size&Baud Rate\cr
1024&over 2400\cr
512&2400\cr
256&1200 \& below\cr
}

Upon two consecutive errors on the same block, the block size isç
halved; minimum block size is 64 bytes. Upon twenty consecutiveç
blocks with no errors and no line noise junk characters, blockç
size is doubled; maximum block size is 1024 bytes.

Keep in mind the whole point of having high speed modems andç
protocols is so that you can run as fast as your machine allows;ç
a modem capable of 1500 characters per second doesn't make yourç
computer any faster, all it guarantees is that it won't hold youç
back anymore.

Now that a few months has gone by since ZMODEM was fist installedç
in \fido, I can offer more concrete advice.

Full streaming works in nearly all circumstances. The 
near-worst-case design is a 4.77MHz PC clone with an 80mS (slow!)ç
hard disk, DOS 3.3, and an extremely fast modem, such as a USç
Robotics Dual Standard, locked at 38,400 baud. Even thisç
combination is capable of doing 11,500 baud under goodç
conditions. There is no need for even ``AT'' type hardware forç
high performance. (At least for file transfer speed alone.)

If you use a multitasker such as DoubleDOS, DESQview, Multilink,ç
etc., and you experience high data error rates or lost data, thenç
under these conditions please DO NOT USE Zmodem Receive fullç
streaming. (See {\tt zm-rx-type}.)

\subheading{Zmodem Controls}

The receive controls affect only how your Fido\slash FidoNet orç
FT program receives files; if someone else calls in to downloadç
files, Zmodem will go as fast as their Zmodem tells Fido or FT toç
go. (They may have done something like this on their end asç
well.)

\subheading{REC'V: FULL STREAMING}

{\parskip=0pt
\example{FidoTerm:\quad ZRXTYPE 0 or 0/D}
\example{Fido:\quad zm-rx-type 0}
}

When receiving, tells the sending program that it can accept dataç
at maximum possible data rate, ie. full streaming. This is meantç
for machines that can accept data at ``high speed'', whateverç
that means to you. 

\subheading{REC'V: FULLY ACK'ED}

\skip
{\parskip=0pt
\example{FidoTerm:\quad ZRXTYPE 1 or 1/D}
\example{Fido:\quad zm-rx-type 1}
}

When receiving files, every block will be acknowledged. (Forç
sending, Fido/FT will do whatever the receiver says.) This isç
extremely conservative, and probably only needs to be used inç
extreme circumstances, such as under a heavily loadedç
multitasker.

\subheading{TRANSMIT: VARIABLE WINDOW}

\skip
{\parskip=0pt
\example{FidoTerm:\quad ZTXTYPE {\it 1 - 64}/U}
\example{Fido:\quad zm-tx-type {\it 1 - 64}}
}

The preferred method of defining a sliding window. When sendingç
files, and the receiver says it can accept full streaming Fido/FTç
will send data in full streaming mode, as long as it receivesç
acknowledges from the receiver every so many [blocks]. Theç
receiver sends occasional acknowledges, and the sender checks forç
them, without pausing the data flow. If the sender doesn't see anç
acknowledge it will stop and wait for one.

At 2400 baud and below, this has all the speed of full streaming,ç
with improved error recovery. The slight penalty is the reverseç
channel does get used, which could slow some high-speed modemsç
down. 

Since the window size is stated in blocks, the size of the windowç
depends on the baud rate and error rate; if many errors occur,ç
Zmodem shrinks the block size, and hence the window shrinks too;ç
if the error rate is exceptionally good, the block size increasesç
as Zmodem increases block size. Higher baud rates start withç
larger blocks.

\goodbreak
\example{window size = [blocks] * block size}

Try starting with [blocks] at 6, which works out to be a 1.5Kç
byte window at 300 and 1200 baud, 3K at 2400, and 6K at 9600 andç
beyond.

HINT: Don't look at the Senders modem activity lights whenç
adjusting window size; look only at the Receivers lights. Theç
senders activity can be misleading; for example, the US Roboticsç
HST has a 32K byte internal buffer, so Zmodem fills it quicklyç
then sits and waits for window synchronization; don't let thisç
fool you into thinking you could make it faster, you can't. Dataç
can only flow out of the modem into the phone line as fast as itç
goes, all that increasing the window size will do is make errorç
recovery slower. 

\subheading{TRANSMIT: FIXED SIZE WINDOW}

\skip
{\parskip=0pt
\example{FidoTerm:\quad ZTXTYPE {\it 1024 - 65536}}
\example{FidoTerm:\quad {\it 1024 - 65536}/U}
\example{Fido:\quad zm-tx-type {\it 1024 - 65536}}
}

This is the second method of defining a sliding window. It worksç
the same as the previous method, except the size of the window isç
fixed, and specified in Kbytes. An 8K window is an 8K window,ç
whether it contains 8 1024 byte blocks or 32 256 byte blocks.

\subheading{TRANSMIT: START BLOCK SIZE}
\skip
{\parskip=0pt
\example{Fido:\quad zm-tx-start {\it 64 - 1024}}
}

Normally Fido determines the data block size by baud rate andç
what the receiver can handle. On extremely bad phone lines, itç
may take too many errors to get the block size down to one thatç
works; above 2400, where the block size starts at 1024 bytes, itç
will take 16 errors (block size halved every four errors, fourç
times) to get the 64 byte packet that may work best. 

This option lets you specify the largest block size to start theç
transfer with. Try 128 or 64 if you have many errors due to phoneç
line noise; if the connection is good, then after every 20 blocksç
the block size will double, and performance improve. 20 blocksç
doesn't take very long when the blocks are 64 bytes each! 

This controls only the starting block size; the block size canç
still increase in the normal manner if there are no errors, asç
outlines in the beginning of this section.

Please make sure that you use only the following values: 64, 128,ç
256, 512, 1024. 

\section{Miscellaneous Additions}

{\bf New command line switch /C}, forces Fido to simply end anyç
outstanding FidoNet event, caused by either a reboot while Fidoç
running (CTL-ALT-DEL) or when using the new {\tt keep-packets}ç
option in FIDO.INI.

{\bf New system files: NODELIST.ZDX and NODE\-LIST.NDX} Fido canç
access any system listed in the nodelist with an average 
worst-case of four small disk reads -- performance with 10,000ç
nodes is much faster than most previous versions with only 500ç
nodes.

MAKELIST creates these, and Fido and all of the supplied toolsç
use them. It is an additional index, and contains all the HOSTSç
and REGIONS and ZONES in the system. The existing NODELIST.IDXç
file has not changed in format nor use; external programs thatç
use it are not affected.

{\bf WELCOME3.BBS, WELCOME4.BBS and WELCOME5.BBS} are displayedç
right after the point where it now displays WELCOME2.BBS.

{\bf Incompletely uploaded or received files} (carrier loss,ç
Control-X abort, timeout, etc) no longer clutter the directories;ç
Fido kills 'em.

{\bf New option at the {\tt More[c,Y,n]} prompt}: C ==ç
Continuous, ie. suspend the ``more'' function until the nextç
prompt for input.

{\bf NODELIST.SYS is not used} anymore. MAKELIST.EXE used toç
generate it, and FIDO.EXE read it. Fido now uses NODELIST.BBSç
directly.

{\bf .BBS text files:} When Fido comes across certain controlç
codes embedded in .BBS text files such as WELCOME1.BBS, itç
performs certain special functions (Page 26 in the manual). Theç
following were added:

{\tty
\uparrow A\quad Skip characters until next CR
\uparrow B\quad Disable Control-C abort
\uparrow C\quad Re-enable Control-C abort
\uparrow D\quad Instant "More"
\uparrow E\quad Disable word-wrap (12s up)
\uparrow F\quad Enable word-wrap (12s up)
\uparrow J\quad Ignored (linefeed)
\uparrow M\quad Outputs CR, LF
\uparrow X\quad Word-wrap off til next CR
\uparrow Z\quad End of File
}

{\bf MsgMgr.EXE options added:} New keyword that can be usedç
within MsgMgr script files:

\example{LOGFILE {\it logfilename}}

Normally MsgMgr logs it's activity in FIDO.LOG, the standard Fidoç
log file. With this command, you can route log activity to anyç
file or pathname or device, or to eliminate it entirely, to theç
device ``NUL''.

You can now specify the name of the script file that the messageç
manager is to use, instead of just the default ``MSGMGR.INI''.ç
For example, you could renumber/purge only your FidoNet areaç
right before mail time, and then use MsgMgr in the usual mannerç
after FidoNet.

MsgMgr will also now translate ``LASTREAD'' and ``HW.DAT'' filesç
if they exist in each message area.

\enddoublecolumns



\pagebreak

\section{FidoNet}

With version 12Q came a rather radical simplification of overallç
FidoNet operation. Gone are all the confusing FidoNet event-typeç
options. Since there are people looking at this who haven't seenç
a \fido\ since version 11, I'll sum up the changes here:

{\obeylines\parskip=0pt\parindent=14pt
\blob True three-level addressing (v12)
\blob Continuous incoming mail (v12)
\blob Incoming message/packet handling (v12s)
\blob Wazoo/Zmodem protocol (v12m)
\blob Usable continuous outgoing mail (v12m)
\blob File Requesting (v12m)
\blob True continuous outgoing mail (v12q)
\blob Incremental packeting (v12q)
\blob Basic point support
\blob Scheduled control of File Requests (v12q)
}

During this revision (12q), most if not all of the 
FidoNet-program implementors were working towards making theirç
program adhere to the basic FSC001 protocol standard, and we allç
tested against each others programs as well. Yes, you can even 
file-attach to SEAdogs.

FidoNet, from the sysop's installation and operation point ofç
view, was kind of a jumble of complex options in EVENTS.INI andç
less than satisfactory when trying to run continuous outgoingç
mail -- ie. to have packets ready for pickup at any time. I thinkç
it is safe to say that all of these problems have been fixed. Youç
no longer need to have a zillion events throughout the day, andç
newly entered messages no longer sit around until one of thoseç
zillion events comes by. 

The FidoNet event types you specify in EVENTS.INI were completelyç
revamped. The previous method involved complex and obscureç
options that confused even me -- it was poorly thought out. Thereç
are now only three types of FidoNet event (described below).

There is what I think a good sample installation that shouldç
cover most peoples needs described below. It should be easy toç
install and understand.

\begindoublecolumns

\section{FidoNet Events}

There are three types of FidoNet events, each described below. 

\subheading{Normal FidoNet}

\example{ALL  2:00  60  FIDONET A}

This is the old standby FidoNet event type. It runs until it'sç
time is up. Human callers are not allowed into Fido; it acceptsç
only FidoNet mail. 

\subheading{Rush FidoNet}

\example{RUSH  2:00  60 FIDONET A}

Very similar to the previous ``vanilla'' FidoNet event, exceptç
that when there is no more mail to send, ie. all the packets haveç
been delivered or the maximum number or tries has been reached,ç
the event terminates early.

RUSH FIDONET events are especially useful when combined with aç
{\tt T)rigger}; you can define an event to run all day long ({\ttç
0:00 1440}), and use it to manually override normal scheduling.

\subheading{Continuous FidoNet}

\example{CONT  2:00  60  FIDONET A}

True continuous outgoing mail. This causes \fido\ to makeç
packets, and have them available for pickup or delivery at anyç
time, while allowing human callers to access Fido freely.

When there is no human caller occupying Fido, and there areç
packets to deliver (according to route language files) FidoNetç
will make calls once per {\tt dial-interval}.

Other FidoNet systems can call in at any time (well, assumingç
it's not in use), deliver FidoNet mail, and pick up packetsç
addressed to it.

If a human or a FidoNet mailer generates a message in the FidoNetç
message area, FidoNet will immediately add it to an existingç
packet or create a new one; and deliver the packet as per normalç
FidoNet routing controls.

\subheading{QUICK FidoNet Option: Obsolete}

The QUICK option is no longer used. All FidoNet events are now,ç
by definition, ``QUICK''. This means that you {\it must} run SET-FIDO if you change any of your ROUTE.* files. Which was stronglyç
reccommended anyways. So now it's mandatory.

\section{A Sample Installation}

The following is a very good starting point for a full featuredç
\fido\ installation for a node in the amateur FidoNet network. Itç
is described in detail below:

{\tty

RUSH    0:00    1440    FIDONET R       T=1
        2:00      60    FIDONET A
CONT    2:00    1380    FIDONET L
}

(Fido executes events by scanning the list of scheduled eventsç
from top to bottom, and runs the first event it finds that isç
runnable. The RUSH FIDONET event will only run (and thereforeç
override the events that follow) when Trigger 1 is turned on.)

And here's a sample ROUTE.BBS file to go with this:

{\tty

IF-SCHEDULE R   ;manual override
    SEND-ONLY
    SEND-TO, NO-ROUTE MYZONE

IF-SCHEDULE A   ;'ZoneMailHour'
    SEND-TO ALL

IF-SCHEDULE L   ;daytime mail --
    SEND-ONLY, DIAL-TRIES 1
    ;generate packets for all
    SEND-TO, NO-ROUTE MYZONE
    ;but call only my own net
    HOLD ALL NOT MYNET

END-IF
}

The first event, RUSH FIDONET R, is controlled by Trigger 1, andç
we'll assume usually turned OFF. (When OFF, the event is inertç
and will not run.) When turned ON, FidoNet will repacketç
according to the route file; in this example, it will makeç
packets for messages within our own zone (SEND-TO MYZONE),ç
without host routing (NO-ROUTE MYZONE), and dial otu to deliverç
those packets as fast as possible (SEND-ONLY). It will stop whenç
(1) if there were no messages to deliver, (2) as soon as allç
messages are delivered, or (3) the maximum number of tries isç
reached.

The second event, FIDONET A, is the normal, mandatory, FidoNetç
``ZMH''. SEND-TO ALL simply means enable mailing to all nodes inç
the nodelist (note that for inter-zone messages, the contents ofç
ROUTE.DEF (elsewhere\dots) will route messages to the properç
zonegate). This event will run until completion; in this example,ç
from 2:00AM til 3:00AM.

The third event, CONT FIDONET L, is the ``background'',ç
continuous FidoNet event. It will run whenever the previous twoç
are not. It will make packets according to the route language forç
tag L: packets only to your zone (SEND-TO MYZONE), no defaultç
host routing (NO-ROUTE MYZONE). FidoNet will make phone callsç
only to nodes in your own net -- HOLD ALL NOT MYNET.

Assume now that it's in the afternoon, and CONT FIDONET L isç
running. You are, for example, 1:125/0, the host for net 125.ç
1:161/12345 calls and delivers a packet with a message destinedç
for 1:125/7. If there were messages for 1:161/12345 it would beç
on HOLD -- it is outside your net (HOLD ALL NOT MYNET) -- and itç
could be picked up at this time.

After it disconnects, Fido unpackets the message. FidoNet thenç
discovers the new message for 1:125/7 -- it immediately creates aç
new packet for 1:125/7, and since that is within your own net,ç
immediately calls it and delivers the packet. If '7 were busy,ç
then Fido would run and wait for a caller. While Fido remainsç
idle (no one calls in), every {\tt dial-interval} FidoNet willç
run, and attempt to deliver that packet to '7.

And further: assume a human caller connects now, with that packetç
to '7 still undelivered, and goes into the FidoNet netmail area,ç
and enters some messages: another to 1:125/7, one to 1:161/12345,ç
and another to say 2:500/5. When the caller disconnects, FidoNetç
will packet those messages: the first will go into the existingç
packet for 1:125/7, the second to (say) a new packet forç
1:161/12345, and the third will not be packeted at all -- youç
said SEND-TO, NO-ROUTE MYZONE so it just sits.

With the packets then updated, FidoNet runs again. It calls '7,ç
connects, and delivers the packet. (The messages and packet canç
then be deleted.) The packet for 1:161/12345 is not delivered,ç
since it is outside your net. FidoNet relinquishes control toç
Fido, allowing human or FidoNet callers in. 

\section{Points}

\fido\ now (12N) includes basic Point addressing support. Laterç
versions will provide complete ``boss node'' functions, so thatç
\fido\ will be able to perform any possible FidoNet mailerç
function; zone gate, zone host, net/region host, ordinary node,ç
point boss, point node.

\fido\ properly handles all point-addressed messages; it willç
scan for TOPT and FMPT Kludge lines, and incorporate them intoç
the message address display. 

When reading existing messages, Fido locates the TOPT and FMPTç
IFNA Kludge lines, like it always has for INTL lines, andç
incorporates them into the displayed address. To the user orç
sysop, there's nothing to even think about.

When entering a message, node address entry is as it always was,ç
but you can add ``{\tt .<1 - 32767>}'' to the node number, orç
just the dot followed by the point number, to send to pointsç
within your own point network. For example: as 125/111, enteringç
.33 would address a message to 1:125/111.33, etc. Same syntax andç
behavior as default net, etc.

When replying, Fido does the same as it does with nodes; theç
message is To: the From: node, unless it is the same as ``us'' inç
which case it reverses the addresses.

Internally, Fido generates TOPT and FMPT lines as the second andç
third lines in the .MSG file; INTL still comes first. Fido willç
locate any of these three lines as long as they occur within theç
first 256 bytes of text following the message header.

Note that Fido will display point numbers only if the pointç
number is NOT zero. 1:125/111.555 will display that way; .0 willç
display as 1:125/111 only.

\section{Wazoo Protocol}

\fido\ now supports two network protocols automatically. One isç
``FidoNet'', known in some circles as ``FSC001'', after theç
filename of the standards document generated by Randy Bush. Fidoç
has supported this protocol since 1985.

The other, newer protocol is called ``Wazoo'', and was originallyç
implemented in Wynn Wagner's Opus program, and now it seems theç
most popular program supporting Wazoo is ``BinkleyTerm''. Bothç
also do FSC001 style FidoNet. Wazoo operates in a similar manner,ç
but uses Zmodem for it's transfers and can support ``fileç
requests'', where the call originator can ``download'' files fromç
the remote computer without the intervention of an operator to doç
``file attaches''. (With appropriate controls, etc.)

There is no impact on existing \fido\ installations regardingç
security, setup or installation, etc. The choice of Wazoo vs.ç
FidoNet is made automatically, though the system operator canç
make changes. The defaults will work fine in all cases.

\subheading{FidoNet Controls in FIDO.INI}

{\tty
mail-errorlevel <0, 3 - 255>
file-errorlevel <0, 3 - 255>
}

With these you can make \fido\ exit to DOS whenever receivesç
incoming message(s) and/or file(s), 

\example{keep-packets <yes,no>}

{\tt keep-packets} can provide much better FidoNet performanceç
improvement for some systems.

When Fido is first run, and there is an active FidoNet event,ç
FidoNet is invoked to create all the packets, if any, that willç
be delivered or picked up by other nodes. It then either runs theç
event until completion, or returns control to Fido (during CONTç
events).

If you are also using DOS errorlevels (mail- or file-errorlevel,ç
external-logins, etc) FidoNet ends the event before returning toç
DOS; the undelivered packets deleted, and a log file summary isç
made, before Fido returns to DOS.

Upon return from the DOS errorlevel processing, Fido thenç
recreates the so-far undelivered packets, and attempts to deliverç
them or hold them for pickup, as determined by the event.

All of this packet/unpacket activity can take signifigant amountsç
of time, especially if you have many packets to deliver, or yourç
system executes many DOS errorlevels per schedule.

{\tt keep-packets yes} makes Fido not delete the packets whenç
executing a DOS errorlevel; therefore the time it took to do 
end-schedule work, plus recreate the packets upon reentry toç
Fido, is saved. 

(FidoNet will always do end-schedule processing if you typeç
Control-C on the keyboard, or if there is an error, such as aç
critical missing file or disk full.)

The penalty for this is slightly increased complexity. When thereç
are outstanding packets, the nodelist files and the .OUT and .FLOç
files in the outbound directory cannot be disturbed. There are aç
few cases where you must keep this in mind:

{\parindent=16pt
\item{1} If your machine is warm-booted (ie. CONTROL-ALT-DEL)ç
while Fido was running, the nodelist files and packet files willç
not be updated properly. 

\item{2} MAKELIST will not let you process a new nodelist ifç
there are packets outstanding, since it needs to create newç
NODELIST files, but they currently contain important information.
}

To solve this problem, there is a way to simply perform the 
end-of-schedule process, that will delete packets, complete theç
log file, and leave the nodelist files free:

\example{FIDO /C}

With /C, Fido will end any outstanding event, and then return toç
DOS. You should use {\tt FIDO/C} before running automaticallyç
MAKELIST, or in your AUTOEXEC batch file, if you are using {\ttç
keep-packets}. 

You can use {\tt FIDO/C} even if there are no packetsç
outstanding, or if {\tt keep-packets} is NO.


\example{system-name}

An optional 60 character string that is the ``name'' of yourç
system. Fido transmits this name to the remote computer duringç
Wazoo sessions. {\tt session-password} may be required forç
connecting to some other Wazoo-based systems; please makeç
arrangements with the person requiring it.


\skip
{\tty
keep-nodemaps <yes,no>;default:YES
fsc011 <yes,no>      ;default: NO
wazoo <yes,no>       ;def.: YES
multi-tsync <yes,no> ;def.: YES
fsc001 <yes,no>      ;default: NO
}

The following are for special purposes only, mainly for verifyingç
FidoNet FSC001 protocol compatibility. Unfortunately in the realç
world there are varying levels of compliance to FSC001; theç
default is pretty ``loose'', for maximum compatibility. {\ttç
fsc011 yes} lets \fido\ accept so-called ``DIETIFNA'' protocol,ç
which means it can skip the slow MODEM7 filename; however SEAdogç
does not accept TELINK blocks and file attaches will then fail.ç
{\tt wazoo no} forces Fido to do only FSC001, ie. pre-12Mç
compatibility. {\tt multi-tsync no} forces Fido back to 11W styleç
single TSYNC character; there is nearly no reason to do this.ç
{\tt fsc001 yes} makes FidoNet and it's XMODEM protocol driverç
conform to 
letter-of-the-law FSC001 specifications; alas, not many FidoNetç
``compatible'' systems will then work, including many \fido\ç
programs!

\section{File Requests}

Fido now supports file request in either FSC001-type or Wazooç
FidoNet sessions. A file request is a file transfer originated byç
the calling system, that requests one of more files by name; theç
called system then transmits the requested files in that sameç
session.

The receiving system has full control over what it will and willç
not allow to be requested; this is to prevent the obvious ``fileç
request *.*'' getting copyrighted programs, critical data filesç
(caller lists anyone?) and other problems.

There are shareware and free programs that will automaticallyç
generate a file request, given only the desired filenames and theç
node address to request from. What follows is the technicalç
description of how it works.

A file request consists of a file with a special name sent to theç
receiving system, the one that will possibly honor the request.ç
The filename is:

\example{XXXXYYYY.REQ}

Where: {\tt XXXX} is the receiving system's net number, in 
four-digit hexadecimal, and {\tt YYYY} the receiving system'sç
four-digit net number. For example, a request to 1/2 would beç
00010002.REQ; a request to 125/111 would be 007D006F.REQ.

Inside this file, one per line, are the file(s) to be requested.ç
Each line ends with a CR or CR/LF. Filenames can be any length,ç
and may not contain pathnames or drive letters. (Fido will ignoreç
them.) Filenames can include wildcards.

\subheading{Generating File Requests}

You can request files from within Fido; it is an option in theç
message editor in the FidoNet message area. You can enter anyç
number of filenames, with wildcards, as will fit on the line.ç
Fido will automatically generate the awful .REQ file for you.


\subheading{Controlling File Requests}

The receiver has a file called ``FILEREQ.INI'', that is the listç
of files that may be requestable from the system. Initially onlyç
two sample files are requestable (see below), and the systemç
operator needs to add to this list all files that you wish to beç
requestable remotely.

As provided by Fido Software, there are only two requestableç
files: ``ABOUT'', which is a short description of what yourç
system is ``about'', and ``FILES'', which is the list of filesç
requestable from your system. In the hobbyist FidoNet network, itç
is traditional (and useful!) to have these two files requestableç
at all times, so that other system operators can find out aboutç
your BBS without having to manually call and ask. 

You can also restrict File Requests to specific hours, with theç
event type FILEREQUEST, in EVENTS.INI:

\example{ALL  3:00  1380  FILEREQUEST}

This allows file requests at any time except between 2:00 andç
3:00AM, the Zone Mail Hour. A file request made while it isç
disabled will send the contents of the file ``NOFILEREQ.BBS'' toç
the requesting system as file XXXXYYYY.FRQ, where XXXXYYY is theç
requesting node's address, as described under the .REQ file.ç
Presumably you'd list in NOFILEREQ.BBS the reasons the fileç
request was not honored.

\subheading{The FILEREQ.INI File}

This file is used to control how \fido\ handles file requests. Itç
is a plain ASCII text file, that you create and maintain, thatç
contains the list of files and directories you wish to haveç
available for other systems to file-request with their FidoNetç
type mailer.

You can also put comments into this file; comments are any lineç
that begins with a semicolon, like so:

\skip
{\tty
;
;Lines beginning with a ``;'' are comments,
;and are ignored by Fido.
;
}
Comments do however slow down processing, so try to keep themç
short.

All other lines in the file define requestable directories orç
specific files. The most popular method is to make the contentsç
of a directory requestable. This is easy; simply list theç
directories you wish to make available, one per line.

\skip
{\tty
C:/LISTS
C:/FIDO/TEXTFILE
C:/SHAREWARE
}

And so on. It means that all files within each directory areç
requestable. There is one odd side effect; if the filename youç
request exists in more than one directory, \fido\ will send youç
every single one. Too bad. For example, ``FILES.BBS''. Fido willç
transmit, just as you asked, FILES.BBS from all directories thatç
contain it. Too bad if that's not what you MEANT, that's what youç
SAID.

Note also that ``FILE'' can contain wildcards; ``*.*'' forç
instance. It will of course return every single requestable fileç
stored in your system. (Ugh.)

It is also useful to have ``logical'' file requests; for example,ç
you want to announce that requesting the file ``NODELIST'' willç
always return the very latest nodelist file, no matter what it isç
really named, without having to constantly rename the file: 

\example{NODELIST=LISTS/NODELIST.*}

Whenever someone requests the filename ``NODELIST'', (the name toç
the left of the ``='' equals sign) Fido will send them your fileç
(after the ``='' equals sign), that matches ``LISTS/NODELIST.*''.ç
This lets files be requested by their logical names, no matterç
where they may reside on your disk. (For revenge, you can have aç
file called ``CALLER.SYS'' that returned something nasty insteadç
of the actual caller file.)

You can use this in other ways: you could respond to a requestç
for ``ALL-LISTS'' with all the files you have, for example:

\example{ALL-LISTS=LISTS/*.*}

There can also be more than one entry with the same requestableç
name. For example, if you wanted to have a ``kit'' of files forç
new system operators requestable, you could convert the requestç
for ``NEW-SYSOP'' to send many files:

\skip
{\tty
NEW-SYSOP=LIST/NODELIST
NEW-SYSOP=NEWNODE.TXT
NEW-SYSOP=/TEXT/COORD.LST
etc
}

Fido will search the entire FILEREQ.INI file, and send all filesç
that match all requests. 


The third method is for when you want to make single files inç
arbitrary subdirectories available. For example, you might wantç
to make certain files in your ``/FIDO'' directory available, butç
still maintain absolute security. Entering ``FILENAME=FILENAME''ç
works, but is tedious and redundant. There is a short form forç
when you just want to make a file requestable with it's originalç
name, and not necessarily provide multiple files, etc:

\example{C:/LIST/NODELIST.099}

A file request for the filename portion (``NODELIST.099'') causesç
your system to send that file, period. The pathname is usedç
locally, in your system only; it is not requestable norç
accessible. This shorthand lets you generate lists of files andç
place them, as-is, into FILEREQ.INI.


\subheading{Nodemaps}

\fido\ saves nodemaps it creates for each FidoNet schedule tag.ç
(Nodemaps are what the Router produces by reading the ROUTE.*ç
routing language files, and applying them to the fileç
NODELIST.NMP.) There is one nodemap file (NODEMAP.tag) perç
schedule tag, and each file is four bytes per node in theç
nodelist -- or 24K per schedule you use for a 6,000 nodeç
nodelist. FidoNet generates a nodemap the first time each eventç
runs -- after that changing FidoNet schedules is nearlyç
instantaneous. (You can disable this (why?!) with the FIDO.INIç
command {\tt keep-nodemaps no}.)


\section{Routing Language Additions}

{\tty
rings <1 - 255>
dial-interval <1 - 60>
cont-interval <1 - 60>
file-errorlevel <0, 3 - 255>
mail-errorlevel <0, 3 - 255>
}

These FIDO.INI statements can appear in route language files. Theç
first four are defined in this errata sheet.


{\tty
    Zone 1                  ;current ZONE is 1
    BEGIN
      Zone 4 ZoneGate a:b/c ;change ZONE to 4,
    END
                            ;zone is now 1 again
}

BEGIN and END add block structure to the router commands thatç
change default behavior, mainly NET and ZONE. BEGIN saves theç
current state, and END restores them. NET and ZONE changes withinç
a BEGIN/END group are local to that group; after the END, theç
values of NET and ZONE are restored to what they were at the timeç
the BEGIN statement was executed. You can nest BEGIN and END upç
to four levels deep.

\smallskip

The one-argument commands POLL, PICKUP, NO-ROUTE, ACCEPT-FROM,ç
HOLD, SEND-TO can be ``stacked'' together, for faster execution.ç
For example, if you do a lot of things like:

\example{Send-To All, PickUp All}

They can now be stacked onto one argument, as in:

\example{Send-To, Pickup All}

The advantage is that all of the stacked commands are executed atç
once (when the ``All'' is read) instead of one at a time. ``ALL''ç
makes the router apply the commands to all nodes in the nodelist;ç
stacking in this example is twice as fast.

\smallskip
\example{ALIAS-AS <alias>, <nodes\dots>}

{\bf A powerful new route language command ALIAS-AS:} Similar toç
the current ROUTE-TO command, you can force all messages routedç
to the alias node, regardless of other routing or files attached.

For example, you exchange mail with a person who runs a node withç
more than one alias address; for example 105/6, 105/0, 1/2 andç
1/3 are all the same machine. You simply set (for example) 105/6ç
as the alias for the other nodes.

Please note that this is not another ``route-to'' command; whileç
it does a ``route-to'' as part of it's action, it is a newç
command entirely. Route-to only does one level of indirection;ç
alias-as adds a second. Alias-as can be thought of as a kind ofç
``route-to route-to''. 

Route-to defines to what destination node a message goes to,ç
possibly (probably) not the one the message is addressed to. 

Alias-as defines to whose packet those routed messages go into.

\subheading{Route file processing} 

A new ROUTE file is introduced: ROUTE.DEF. Fido looks for andç
processes ROUTE.DEF before looking for ROUTE.(tag) and/orç
ROUTE.BBS. This lets you do routing controls in common with allç
FidoNet events. 

New keywords were added to the route language processor:

\skip
{\tty
IF-SCHEDULE <tag>
END-IF
}

Ken G's suggestion roundly applauded by everyone else. Even I nowç
agree it is an excellent idea. It does what you think it does.ç
You now have an alternative to all those scroungy littleç
ROUTE.<tag> files; put them all into ROUTE.BBS (maybe keepç
ROUTE.DEF, it partitions that nicely and doesn't slow thingsç
down) for ease in maintenance.

If no IF-SCHEDULE statements are used, then FidoNet processes theç
route list normally; all statements are read and processed. 

\skip
{\tty
IF-SCHEDULE A
\indent schedule A statements ...
END-IF
}

If the currently executing schedule is ``A'', then the statementsç
between the IF\dots END are executed, otherwise they are ignored.

\skip
{\tty
IF-SCHEDULE M
\indent schedule M statements ...

IF-SCHEDULE B
\indent schedule B statements ...

IF-SCHEDULE D
\indent schedule D statements ...

END-IF
}

Not a big deal to figure out. Each IF-SCHEDULE ends the oneç
before it (if any). Processing is as you'd expect.

If you have commands to execute for all schedules (say, PICKUPç
ALL) just place them before any IF-SCHEDULE statements.

\example{zone x  ZONEGATE node}

This tells FidoNet to route all mail for Zone X to the specifiedç
node; the supplied ROUTE.DEF file implements IFNA type zoneç
gating. There is no restriction on Fido's ZoneGate. For example,ç
in ROUTE.DEF:

\skip
{\tty
;
;Do IFNA Kludge type Zone Gating
;
Zone 2 ZoneGate 1:1/2
Zone 3 ZoneGate 1:1/3
}

\example{DIAL-TRIES n}
\example{CONNECT-TRIES n}

Maximum number of times to dial each node. (Default is ``dial-
tries'' and ``connect-tries'', respectively, in FIDO.INI)

\example{MODEM-STRING s}

Presumably a command string of special initialization to beç
issued before this event starts. This is intended for specialç
modems such as the TrailBlazer where you might want to enableç
special features during limited periods.

\example{MYZONE}

A modifier keyword, meaning All nodes in my own zone.

\example{THISZONE}

Another modifier keyword, meaning All nodes in the currentlyç
specified zone.

\enddoublecolumns
\bye
